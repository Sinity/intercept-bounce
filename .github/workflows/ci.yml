# .github/workflows/ci.yml
name: Rust CI

on:
  push:
    branches: ["master"] # CORRECTED: Use master branch
  pull_request:
    branches: ["master"] # CORRECTED: Use master branch

jobs:
  build_and_test: # Renamed job for clarity, was nix_checks
    name: Build and Test (Nix) # Renamed job for clarity
    runs-on: ubuntu-latest # Use a Linux runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27 # Use a recent version
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          # Enable experimental features required for flakes
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Cachix # Optional: speeds up builds by caching Nix derivations
        uses: cachix/cachix-action@v15
        with:
          # Replace 'intercept-bounce' with your actual Cachix cache name if desired
          name: intercept-bounce # Using the name from previous suggestion, adjust if needed
          # If your cache is private, uncomment and set the secret in GitHub repo settings
          # authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Check formatting (Nix)
        # CORRECTED: Use nix develop to run the command in the dev environment
        run: nix develop .# --command cargo fmt -- --check

      - name: Run Linter (Clippy - Nix)
        # CORRECTED: Use nix develop, run on release profile, deny warnings
        run: nix develop .# --command cargo clippy --all-targets --release -- --deny warnings

      - name: Run Tests (Nix)
        # CORRECTED: Use nix develop, run on release profile, show output on failure
        run: nix develop .# --command cargo test --all-targets --release -- --nocapture

      - name: Build Nix package # Renamed step for clarity
        # CORRECTED: Build the main package defined in flake.nix for linux explicitly
        run: nix build .#packages.x86_64-linux.default --verbose

      # Optional: Add a step to build checks if defined in flake.nix
      # - name: Build Nix Checks
      #   run: nix build .#checks.x86_64-linux.default # Explicitly target linux
